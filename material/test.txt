/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var subsetsWithDup = function(nums) {
    const result = [];
    nums.sort();
    
    const dfs = (arr, i) => {
        if (i === nums.length) {
            result.push(arr);
            return;
        }
        // take the current number
        dfs([...arr, nums[i]], i+1);
        // while not at end of array and duplicate after current number
        while (i+1 < nums.length && nums[i] === nums[i + 1]) {
            i++;
        }
        // leave the current number
        dfs([...arr], i+1);
    }
    
    dfs([], 0);
    return result;
};



///////////////////////////////////////////////////////////////////////////////

const numDecodings = function(s, i = 0, memo = {}) {
  if (i in memo) return memo[i];
  if (s[i] === '0') return 0;
  if (i >= s.length - 1) return 1;
  memo[i] = numDecodings(s, i + 1, memo) + (s[i] + s[i + 1] < 27 ? numDecodings(s, i + 2, memo) : 0);
  return memo[i];
};